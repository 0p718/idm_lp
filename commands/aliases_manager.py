import sys
from typing import List

from vkbottle.rule import FromMe
from vkbottle.user import Blueprint, Message

from objects import Database, Alias
from utils import edit_message

user = Blueprint(
    name='aliases_manager_blueprint'
)


def add_alias(db: Database, name: str, command_from: str, command_to: str) -> Alias:
    new_alias = Alias({
        'name': name,
        'command_from': command_from,
        'command_to': command_to
    })
    db.aliases.append(new_alias)
    db.save()
    return new_alias


def remove_alias(db: Database, alias: Alias) -> None:
    db.aliases.remove(alias)
    db.save()


def show_aliases(db: Database) -> str:
    if len(db.aliases):
        message = 'üìÉ –í–∞—à–∏ –∞–ª–∏–∞—Å—ã:\n'
        index = 1
        for alias in db.aliases:
            message += f"{index}. {alias.name} ({alias.command_from} -> !–ª {alias.command_to})\n"
            index += 1
        return message
    else:
        return "‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∞–ª–∏–∞—Å–æ–≤"


def delete_last_space(value: str) -> str:
    if value[-1] == ' ':
        return value[:-1]
    return value


@user.on.message(FromMe(), text="<prefix:service_prefix> +–∞–ª–∏–∞—Å <alias_name>\n<command_from>\n<command_to>")
@user.on.chat_message(FromMe(), text="<prefix:service_prefix> +–∞–ª–∏–∞—Å <alias_name>\n<command_from>\n<command_to>")
async def add_alias_wrapper(message: Message, alias_name: str, command_from: str, command_to: str, **kwargs):
    sys.stdout.write(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–∏–∞—Å–∞\n")
    db = Database.load()
    alias_name = delete_last_space(alias_name)
    command_from = delete_last_space(command_from)
    command_to = delete_last_space(command_to)

    for alias in db.aliases:
        if alias_name == alias.name:
            await edit_message(
                message,
                f"‚ö† –ê–ª–∏–∞—Å <<{alias_name}>> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
            return

    new_alias = add_alias(db, alias_name, command_from, command_to)
    await edit_message(
        message,
        f"‚úÖ –ù–æ–≤—ã–π –∞–ª–∏–∞—Å <<{alias_name}>> —Å–æ–∑–¥–∞–Ω\n"
        f"–ö–æ–º–∞–Ω–¥—ã: {new_alias.command_from} -> !–ª {command_to}"
    )


@user.on.message(FromMe(), text="<prefix:service_prefix> –∞–ª–∏–∞—Å—ã")
@user.on.chat_message(FromMe(), text="<prefix:service_prefix> –∞–ª–∏–∞—Å—ã")
async def show_aliases_wrapper(message: Message, **kwargs):
    sys.stdout.write(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–∏–∞—Å–æ–≤\n")
    db = Database.load()
    await edit_message(
        message,
        show_aliases(db)
    )


@user.on.message(FromMe(), text="<prefix:service_prefix> -–∞–ª–∏–∞—Å <alias_name>")
@user.on.chat_message(FromMe(), text="<prefix:service_prefix> -–∞–ª–∏–∞—Å <alias_name>")
async def remove_alias_wrapper(message: Message, alias_name: str, **kwargs):
    sys.stdout.write(f"–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞\n")
    db = Database.load()
    alias_name = delete_last_space(alias_name)
    for alias in db.aliases:
        if alias_name == alias.name:
            remove_alias(db, alias)
            await edit_message(
                message,
                f"‚úÖ –ê–ª–∏–∞—Å <<{alias_name}>> —É–¥–∞–ª–µ–Ω"
            )
            return

    await edit_message(
        message,
        f'‚ö† –ê–ª–∏–∞—Å <<{alias_name}>> –Ω–µ –Ω–∞–π–¥–µ–Ω'
    )


alias_packs = {
    "–¥–¥": [
        Alias(name="–¥–¥", command_from="–¥–¥", command_to="–¥–¥"),
        Alias(name="—Ä—Ä", command_from="—Ä—Ä", command_to="—Ä—Ä"),
        Alias(name="—Ä—Ä-", command_from="—Ä—Ä-", command_to="—Ä—Ä-"),
    ],
    "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π": [
        Alias(name="–ø–æ–º–æ—â—å", command_from="–ø–æ–º–æ—â—å", command_to="–ø–æ–º–æ—â—å"),
        Alias(name="–∏–Ω—Ñ–æ", command_from="–∏–Ω—Ñ–æ", command_to="–∏–Ω—Ñ–æ"),

        Alias(name="—à–∞–±–ª–æ–Ω", command_from="—à–∞–±", command_to="—à–∞–±"),
        Alias(name="—à–∞–±–ª–æ–Ω—ã", command_from="—à–∞–±—ã", command_to="—à–∞–±—ã"),

        Alias(name="–≥–æ–ª–æ—Å–æ–≤–æ–π —à–∞–±–ª–æ–Ω", command_from="–≥—à–∞–±", command_to="–≥—à–∞–±"),
        Alias(name="–≥–æ–ª–æ—Å–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã", command_from="–≥—à–∞–±—ã", command_to="–≥—à–∞–±—ã"),

        Alias(name="–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω", command_from="–¥—à–∞–±", command_to="–¥—à–∞–±"),
        Alias(name="–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã", command_from="–¥—à–∞–±—ã", command_to="–¥—à–∞–±—ã"),

        Alias(name="–≤ –¥—Ä—É–∑—å—è", command_from="+–¥—Ä", command_to="+–¥—Ä"),
        Alias(name="–∏–∑ –¥—Ä—É–∑–µ–π", command_from="-–¥—Ä", command_to="-–¥—Ä"),

        Alias(name="–≤ —á—Å", command_from="+—á—Å", command_to="+—á—Å"),
        Alias(name="–∏–∑ —á—Å", command_from="-—á—Å", command_to="-—á—Å"),
    ]
}


def generate_aliases_pack_description(pack: List[Alias]) -> str:
    message = ""
    index = 1
    for alias in pack:
        message += f"{index}. {alias.name} ({alias.command_from} -> !–ª {alias.command_to})\n"
        index += 1
    return message


def check_name_duplicates(db: Database, pack: List[Alias]) -> bool:
    current_alias_names = [alias.name for alias in db.aliases]
    for alias in pack:
        if alias.name in current_alias_names:
            return False
    return True


@user.on.message(FromMe(), text="<prefix:service_prefix> –∞–ª–∏–∞—Å—ã –∏–º–ø–æ—Ä—Ç <pack_name>")
@user.on.chat_message(FromMe(), text="<prefix:service_prefix> –∞–ª–∏–∞—Å—ã –∏–º–ø–æ—Ä—Ç <pack_name>")
async def import_aliases_wrapper(message: Message, pack_name: str, **kwargs):
    if pack_name not in alias_packs.keys():
        await edit_message(
            message,
            "‚ö† –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return

    sys.stdout.write(f"–ò–º–ø–æ—Ä—Ç –∞–ª–∏–∞—Å–æ–≤\n")
    pack = alias_packs[pack_name]

    db = Database.load()

    if not check_name_duplicates(db, pack):
        await edit_message(
            message,
            "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫. –ï—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã."
        )
        return

    db.aliases.extend(pack)
    db.save()
    await edit_message(
        message,
        f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ {len(pack)} –∞–ª–∏–∞—Å–æ–≤\n" + generate_aliases_pack_description(pack)
    )


@user.on.message(FromMe(), text="<prefix:service_prefix> –∞–ª–∏–∞—Å—ã –ø–∞–∫–∏")
@user.on.chat_message(FromMe(), text="<prefix:service_prefix> –∞–ª–∏–∞—Å—ã –ø–∞–∫–∏")
async def import_aliases_wrapper(message: Message, **kwargs):
    text = "üìÉ –ü–∞–∫–∏ –∞–ª–∏–∞—Å–æ–≤:\n"
    index = 1
    for pack_name in alias_packs.keys():
        text += f"{index}. {pack_name} ({len(alias_packs[pack_name])} –∞–ª–∏–∞—Å–æ–≤)\n"
        index += 1
    await edit_message(
        message,
        text
    )


@user.on.message(FromMe(), text="<prefix:service_prefix> –∞–ª–∏–∞—Å—ã –ø–∞–∫ <pack_name>")
@user.on.chat_message(FromMe(), text="<prefix:service_prefix> –∞–ª–∏–∞—Å—ã –ø–∞–∫ <pack_name>")
async def import_aliases_wrapper(message: Message, pack_name: str, **kwargs):
    if pack_name not in alias_packs.keys():
        await edit_message(
            message,
            "‚ö† –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    pack = alias_packs[pack_name]
    await edit_message(
        message,
        f"–ü–∞–∫ –∞–ª–∏–∞—Å–æ–≤ <<{pack_name}>>:\n" +
        generate_aliases_pack_description(pack)
    )
